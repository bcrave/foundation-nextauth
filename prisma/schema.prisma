generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuthToken {
  authToken  String   @unique
  expiration DateTime
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

model Organization {
  id          String   @id @default(cuid())
  name        String   @unique
  address     String
  city        String
  state       String
  zipCode     String
  phoneNumber String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean
  users       User[]
}

model User {
  id             String       @id @default(cuid())
  firstName      String
  lastName       String
  email          String       @unique
  password       String
  phoneNumber    String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  role           Role         @default(USER)
  organizationId String
  isActive       Boolean      @default(true)
  account        Account[]
  session        Session[]
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
